#!/usr/bin/env python3
"""
Configure AWS credentials for Amazon Q Business account
"""
import os
import json
import subprocess

def main():
    print("üîß AWS Credentials Configuration for Amazon Q")
    print("=" * 60)
    
    # Load current configuration
    try:
        with open('local.settings.json', 'r') as f:
            config = json.load(f)
        
        target_account = config['Values']['AWS_ACCOUNT_ID']
        region = config['Values']['AWS_REGION']
        
        print(f"üìã Target Configuration:")
        print(f"   ‚Ä¢ AWS Account: {target_account}")
        print(f"   ‚Ä¢ AWS Region: {region}")
        print(f"   ‚Ä¢ Amazon Q App: {config['Values']['AMAZON_Q_APPLICATION_ID']}")
        print()
        
    except Exception as e:
        print(f"‚ùå Error reading configuration: {e}")
        return
    
    print("üîë Current AWS Credentials Status:")
    
    # Check current AWS configuration
    try:
        result = subprocess.run(['aws', 'sts', 'get-caller-identity'], 
                              capture_output=True, text=True, check=True)
        
        identity = json.loads(result.stdout)
        current_account = identity.get('Account')
        current_arn = identity.get('Arn')
        
        print(f"   ‚úÖ Current Account: {current_account}")
        print(f"   ‚úÖ Identity: {current_arn}")
        
        if current_account == target_account:
            print(f"   üéâ PERFECT! Your AWS credentials already match the Amazon Q account!")
            return test_amazon_q_access()
        else:
            print(f"   ‚ö†Ô∏è  Account mismatch!")
            print(f"      ‚Ä¢ Current: {current_account}")
            print(f"      ‚Ä¢ Required: {target_account}")
            
    except subprocess.CalledProcessError as e:
        print(f"   ‚ùå AWS CLI error: {e}")
        print("   üí° Install AWS CLI: pip install awscli")
        return False
    except json.JSONDecodeError:
        print("   ‚ùå Invalid AWS CLI response")
        return False
    except FileNotFoundError:
        print("   ‚ùå AWS CLI not found")
        print("   üí° Install AWS CLI: pip install awscli")
        return False
    
    print()
    print("üöÄ Next Steps to Fix AWS Credentials:")
    print("=" * 60)
    print("1. üîë Get AWS credentials for account 891376957673")
    print("   ‚Ä¢ Access AWS Console for account 891376957673")
    print("   ‚Ä¢ Go to IAM > Users > Your User > Security credentials")
    print("   ‚Ä¢ Create new Access Key if needed")
    print()
    print("2. üõ†Ô∏è  Configure AWS CLI:")
    print("   aws configure")
    print("   ‚Ä¢ AWS Access Key ID: [your-access-key]")
    print("   ‚Ä¢ AWS Secret Access Key: [your-secret-key]")  
    print("   ‚Ä¢ Default region name: us-east-1")
    print("   ‚Ä¢ Default output format: json")
    print()
    print("3. ‚úÖ Verify configuration:")
    print("   aws sts get-caller-identity")
    print("   # Should show Account: 891376957673")
    print()
    print("4. üéØ Run test again:")
    print("   python3 configure-aws-for-amazon-q.py")
    print()
    
    return False

def test_amazon_q_access():
    """Test Amazon Q Business API access"""
    print()
    print("üß™ Testing Amazon Q Business Access...")
    
    try:
        import boto3
        from botocore.exceptions import ClientError
        
        # Load configuration
        with open('local.settings.json', 'r') as f:
            config = json.load(f)
        
        app_id = config['Values']['AMAZON_Q_APPLICATION_ID']
        region = config['Values']['AWS_REGION']
        
        # Create Amazon Q Business client
        client = boto3.client('qbusiness', region_name=region)
        
        # Test API access
        response = client.get_application(applicationId=app_id)
        
        print(f"   ‚úÖ Amazon Q Application: {response['displayName']}")
        print(f"   ‚úÖ Status: {response['status']}")
        print(f"   ‚úÖ Created: {response['createdAt']}")
        print()
        print("üéâ SUCCESS! Amazon Q Business integration is working!")
        print("üöÄ Your email automation system is fully operational!")
        
        return True
        
    except ClientError as e:
        error_code = e.response['Error']['Code']
        if error_code == 'ResourceNotFoundException':
            print(f"   ‚ùå Amazon Q application not found in this account")
        elif error_code == 'AccessDeniedException':
            print(f"   ‚ùå Access denied - check IAM permissions")
        else:
            print(f"   ‚ùå AWS Error: {error_code}")
        return False
        
    except Exception as e:
        print(f"   ‚ùå Error: {e}")
        return False

if __name__ == "__main__":
    success = main()
    if not success:
        print("üí° After configuring AWS credentials, run this script again to verify!")
